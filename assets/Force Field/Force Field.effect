// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }

        rimColor:       { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        rimPow:         { value: 1, editor: { slide: true, range: [1, 3], step: 0.01 } }
        rimIntensity:   { value: 1, editor: { slide: true, range: [1, 4], step: 0.01 } }

        intersecPow:    { value: 1, editor: { slide: true, range: [1, 4], step: 0.01 } }
        depthTexture:   { value: white }

        noiseTexture:   { value: white }
        sceneTexture:   { value: white }
        XSpeed:         { value: 0.05, target: UVSpeed.x, editor: { slide: true, range: [0, 0.5], step: 0.01 } }
        YSpeed:         { value: 0.05, target: UVSpeed.y, editor: { slide: true, range: [0, 0.5], step: 0.01 } }
        distortIntensity: { value: 0.01, editor: { slide: true, range: [0, 0.5], step: 0.001 } }

      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  out vec2 v_uv;
  out vec3 v_position; // Get the world position of vertex in vs.
  out vec3 v_worldNormal; // Get the world normal in vs.
  out vec4 v_screenPos; // Get the position of clip space(*).

  uniform TexCoords {
    vec4 tilingOffset;
  };

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld, matWorldIT; 
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    v_position = (matWorld * position).xyz; // Multiply the local position by matWorld to get the position in world space.
    v_worldNormal = normalize((matWorldIT * vec4(a_normal, 0.0)).xyz); // Multiply the normal in local space by matWorldIT to get the mprmal in world space.

  //  return cc_matProj * (cc_matView * matWorld) * position; //The output of vs is the position in clip space(**).

    v_screenPos = cc_matProj * (cc_matView * matWorld) * position; // (*)In vs, we store the position of clip space.

    return v_screenPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position; // Pass the world position to fs.
  in vec3 v_worldNormal; // Pass the world normal to fs.
  in vec4 v_screenPos; // (*)Then pass it to fs.
  
  uniform sampler2D mainTexture;
  uniform sampler2D depthTexture; // Depth map.
  uniform sampler2D noiseTexture;
  uniform sampler2D sceneTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 rimColor;
    vec2 UVSpeed;
    float rimPow;
    float rimIntensity;
    float intersecPow;
    float distortIntensity;
  };

  // No matter the depth stored in the depth map or the depth get from NDC space, both are non-linear depth.
  // To reduce the depth accuracy error, we need to convert the non-linear depth to linear depth.

  float LinearEyeDepth (float depth){ // Get the the distance from camera position to vertex position.
    float near = cc_nearFar.x;
    float far = cc_nearFar.y;
    float zc0 = (near - far) / near;
    float zc1 = far / near;
    vec4 bufferParams = vec4(zc0, zc1, zc0/far, zc1 / far);

    float linearDepth = 1.0 / (bufferParams.z * depth + bufferParams.w);
  //  float linearDepth = 1.0 / (bufferParams.x * depth + bufferParams.y); // Test on quad.
    return linearDepth;
  }

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 o = mainColor;

    // Rim color ---------------------------------------------------------

    vec3 viewDir = normalize(cc_cameraPos.xyz - v_position); // Subtract position from camera position can get the inverse of view direction.

    float fRim = 1.0 - abs(dot(normalize(v_worldNormal), viewDir)); // As the normals pass from vs to fs will no longer be normalized due to the interpolation so it needs to be normalized again.
    // The force field is transparent so we need to show its back side. To make sure the correctness of normals in the back side, we use the abs() to fix the value of dot.

    fRim = pow(fRim, rimPow);
  //  o = mix(o, rimColor, fRim);

    // Intersect color ---------------------------------------------------------

    // (**)Divide the position's x,y,z by w to get the position in NDC space, position.z in NDC space multiply by 0.5 then add 0.5 (convert to range 0 - 1) is the depth's value (Depth = Zndc * 0.5 + 0.5).
    // Then use it as UV to sample thew depthMap.
    vec2 screenUV = v_screenPos.xy / v_screenPos.w * 0.5 + 0.5;
    float sceneZ = LinearEyeDepth(texture(depthTexture, screenUV).r); // Convert none-linear depth of the scene to linear depth by LinearEyeDepth method;
    float sphereZ = LinearEyeDepth(v_screenPos.z / v_screenPos.w * 0.5 + 0.5); // Divide z by w in clip space to get the value of z in NDC space, convert range to 0 - 1, it's the depth of sphere.
    
    float diff = clamp((sceneZ - sphereZ), 0.0, 1.0); // Use method clamp to bound their depth difference between 0 and 1.
    float fIntersect = 1.0 - diff; // Then use one minus depth difference as the blend factor of intersection.
    fIntersect = pow(fIntersect, intersecPow); // Use pow to make it non-linear.

    float factor = max(fRim, fIntersect);

    // Distortion ---------------------------------------------------------

    vec2 newUV = v_uv + cc_time.xx * UVSpeed.xy;
    vec4 offset = texture(noiseTexture, newUV);
    screenUV += (offset.xy * 2.0 - 1.0) * distortIntensity;
    vec4 distortColor = texture(sceneTexture, screenUV);

  //  return vec4(sceneZ, sceneZ, sceneZ, 1.0); // Test on quad.
    o = rimColor * factor * rimIntensity + distortColor;
    return o;
  }
}%
